AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a VPC with public and private subnets for the Synapse stacks.
Parameters:
  VpcName:
    Description: The VPC name (i.e. Synapse-Prod)
    Type: String
  VpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 10.40)
    Type: String
  PublicSubnetZones:
    Description: Availability zones for public subnets
    Type: List<AWS::EC2::AvailabilityZone::Name>
    ConstraintDescription: List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c
    Default: "us-east-1a, us-east-1b"
  PrivateSubnetZones:
    Description: Availability zones for private subnets
    Type: List<AWS::EC2::AvailabilityZone::Name>
    ConstraintDescription: List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c
    Default: "us-east-1a, us-east-1b"
  VpnCidr:
    Description: CIDR of the (sophos-utm) VPN
    Type: String
    Default: "10.20.0.0/16"
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "0.0/16"
    REDPUBLIC1:
      CIDR: "0.0/20"
    REDPRIVATE1:
      CIDR: "16.0/20"
    REDPUBLIC2:
      CIDR: "32.0/20"
    REDPRIVATE2:
      CIDR: "48.0/20"
    GREENPUBLIC1:
      CIDR: "64.0/20"
    GREENPRIVATE1:
      CIDR: "80.0/20"
    GREENPUBLIC2:
      CIDR: "96.0/20"
    GREENPRIVATE2:
      CIDR: "112.0/20"
    BLUEPUBLIC1:
      CIDR: "128.0/20"
    BLUEPRIVATE1:
      CIDR: "144.0/20"
    BLUEPUBLIC2:
      CIDR: "160.0/20"
    BLUEPRIVATE2:
      CIDR: "176.0/20"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPUBLIC1, REDPUBLIC2, REDPRIVATE1, REDPRIVATE2, GREENPUBLIC1, GREENPUBLIC2, GREENPRIVATE1, GREENPRIVATE2, BLUEPUBLIC1, BLUEPUBLIC2, BLUEPRIVATE1, BLUEPRIVATE2"
        -
          Key: "Name"
          Value: !Ref VpcName
  REDPUBLIC1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, REDPUBLIC1, CIDR]
      AvailabilityZone: !Select
        - 0
        - !Ref PublicSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPUBLIC1"
        -
          Key: "Name"
          Value: "REDPUBLIC1"
  REDPUBLIC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, REDPUBLIC2, CIDR]
      AvailabilityZone: !Select
        - 1
        - !Ref PublicSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPUBLIC2"
        -
          Key: "Name"
          Value: "REDPUBLIC2"
  REDPRIVATE1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, REDPRIVATE1, CIDR]
      AvailabilityZone: !Select
        - 0
        - !Ref PrivateSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPRIVATE1"
        -
          Key: "Name"
          Value: "REDPRIVATE1"
  REDPRIVATE2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, REDPRIVATE2, CIDR]
      AvailabilityZone: !Select
        - 1
        - !Ref PrivateSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPRIVATE2"
        -
          Key: "Name"
          Value: "REDPRIVATE2"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "REDPUBLIC1, REDPUBLIC2"
        -
          Key: "Name"
          Value: "REDPUBLIC1, REDPUBLIC2"
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  REDPUBLIC1SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "REDPUBLIC1Subnet"
      RouteTableId:
        Ref: "PublicRouteTable"
  REDPUBLIC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "REDPUBLIC2Subnet"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  REDPUBLIC1SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "REDPUBLIC1Subnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  REDPUBLIC2SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "REDPUBLIC2Subnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: "Private"
  REDPRIVATE1SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "REDPRIVATE1Subnet"
      RouteTableId:
        Ref: "PrivateRouteTable"
  REDPRIVATE2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "REDPRIVATE2Subnet"
      RouteTableId:
        Ref: "PrivateRouteTable"
  VpnSecurityGroup:
    DependsOn: "VPC"
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for VPN
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - CidrIp: !Ref VpnCidr
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
          Description: "Allow all VPN traffic"
      # CF does not support removing all rules, workaround is to add a pointless rule
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
Outputs:
  VPCId:
    Description: "VPCId of the newly created VPC"
    Value:
      Ref: "VPC"
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VPCId']]
  VpcCidr:
    Description: "VPC CIDR of the newly created VPC"
    Value: !GetAtt
      - VPC
      - CidrBlock
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcCidr']]
  PublicRouteTable:
    Description: "Route table Id for public subnets"
    Value: !Ref PublicRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicRouteTable']]
  REDPUBLIC1Subnet:
    Description: "SubnetId of the public subnet REDPUBLIC1"
    Value: !Ref REDPUBLIC1Subnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'REDPUBLIC1Subnet']]
  REDPUBLIC2Subnet:
    Description: "SubnetId of the public subnet REDPUBLIC2"
    Value: !Ref REDPUBLIC2Subnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'REDPUBLIC2Subnet']]
  PrivateRouteTable:
    Description: "Route table Id for private subnets"
    Value: !Ref PrivateRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PrivateRouteTable']]
  REDPRIVATE1Subnet:
    Description: "SubnetId of the private subnet REDPRIVATE1"
    Value: !Ref REDPRIVATE1Subnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'REDPRIVATE1Subnet']]
  REDPRIVATE2Subnet:
    Description: "SubnetId of the private subnet 2"
    Value: !Ref REDPRIVATE2Subnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'REDPRIVATE2Subnet']]
  VpcDefaultSecurityGroup:
    Description: "VPC DefaultSecurityGroup Id "
    Value: { "Fn::GetAtt" : ["VPC", "DefaultSecurityGroup"] }
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcDefaultSecurityGroup']]
  VpnSecurityGroup:
    Description: "VPN Security Group Id "
    Value: !Ref VpnSecurityGroup
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpnSecurityGroup']]
