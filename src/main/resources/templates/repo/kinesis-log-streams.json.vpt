#if( $kinesisFirehoseStreams )
	,"KinesisFirehoseLogRole":{
		"Type":"AWS::IAM::Role",
		"Properties":{
			"AssumeRolePolicyDocument":{
				"Version":"2012-10-17",
				"Statement":[
					{
						"Sid":"",
						"Effect":"Allow",
						"Principal":{
							"Service":"firehose.amazonaws.com"
						},
						"Action":"sts:AssumeRole",
						"Condition":{
							"StringEquals":{
								"sts:ExternalId":{
									"Ref":"AWS::AccountId"
								}
							}
						}
					}
				]
			},
			"Policies":[
				{
					"PolicyName":"kinesisWriteToS3Policy",
					"PolicyDocument":{
						"Version":"2012-10-17",
						"Statement":[
							{
								"Sid":"",
								"Effect":"Allow",
								"Action":[
									"s3:AbortMultipartUpload",
									"s3:GetBucketLocation",
									"s3:GetObject",
									"s3:ListBucket",
									"s3:ListBucketMultipartUploads",
									"s3:PutObject"
								],
								"Resource":[
									"arn:aws:s3:::${stack}.log.sagebase.org",
									"arn:aws:s3:::${stack}.log.sagebase.org/*"
								]
							},
							{
								"Effect":"Allow",
								"Action": [
									"glue:GetTableVersions"
								],
								"Resource":[
									"*"
								]
							},
							{
								"Effect":"Allow",
								"Action":[
									"kms:Decrypt"
								],
								"Resource":[
									"*"
								]
							}
						]
					}
				}
			]
		}
	},
	"${stack}${instance}GlueDatabase": {
		"Type":"AWS::Glue::Database",
		"Properties":{
			"CatalogId":{
				"Ref":"AWS::AccountId"
			},
			"DatabaseInput": {}
		}
	},
	#foreach( $table in $glueTables)
	"${stack}${instance}${table.name}GlueTable": {
		"Type":"AWS::Glue::Table",
		"Properties": {
			"CatalogId": {
				"Ref":"AWS::AccountId"
			},
			"DatabaseName": {
				"Ref":"${stack}${instance}GlueDatabase"
			},
			"TableInput": {
				"StorageDescriptor": {
					"Columns": [
						#foreach($column in $table.columns.entrySet())
						{
							"Name":"${column.key}",
							"Type":"${column.value}"
						}
						#if( $foreach.hasNext),#end
						#end
					],
					"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
					"outputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
					"Compressed": false,
					"SerdeInfo": {
						"SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
						"Parameters": {
							"serialization.format": "1"
						}
					}
				},
				"PartitionKeys": [
					#foreach($partitionKey in $table.partitionKeys.entrySet())
					{
						"Name":"${partitionKey.key}",
						"Type":"${partitionKey.value}"
					}
					#if( $foreach.hasNext),#end
					#end
				],
				"TableType": "EXTERNAL_TABLE"
			}
		}
	},
	#end
	#foreach( $stream in $kinesisFirehoseStreams)
	"${stream.name}KinesisStream":{
		"Type":"AWS::KinesisFirehose::DeliveryStream",
		"Properties":{
			"DeliveryStreamName":"${stack}${instance}${stream.name}",
			"DeliveryStreamType":"DirectPut",
			"ExtendedS3DestinationConfiguration":{
				"RoleARN":{
					"Fn::GetAtt":[
						"KinesisFirehoseLogRole",
						"Arn"
					]
				},
				"BucketARN":"arn:aws:s3:::${stack}.log.sagebase.org",
				"Prefix":"${stream.name}/${stream.partitionScheme}/",
				"ErrorOutputPrefix":"${stream.name}/errors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/",
				#if( $stream.convertToParquet )
				"BufferingHints":{
					"IntervalInSeconds":"60",
					"SizeInMBs":"64"
				},
				"CompressionFormat":"UNCOMPRESSED",
				"DataFormatConversionConfiguration": {
					"SchemaConfiguration": {
						"CatalogId": {
							"Ref":"AWS::AccountId"
						},
						"RoleARN":{
							"Fn::GetAtt":[
								"KinesisFirehoseLogRole",
								"Arn"
							]
						},
						"DatabaseName": {
							"Ref":"${stack}${instance}GlueDatabase"
						},
						"TableName": {
							"Ref":"${stack}${instance}${stream.tableName}GlueTable"
						},
						"Region": {
							"Ref":"AWS::Region"
						},
						"VersionId":"LATEST"
					},
					"InputFormatConfiguration":{
						"Deserializer": {
							"OpenXJsonSerDe":{}
						}
					},
					"OutputFormatConfiguration":{
						"Serializer": {
							"ParquetSerDe":{}
						}
					},
					"Enabled": true
				}
				#else
				"BufferingHints":{
					"IntervalInSeconds":"60",
					"SizeInMBs":"50"
				},
				"CompressionFormat":"GZIP"
				#end
			}
		}
	}
	#if( $foreach.hasNext) , #end
	#end
#end