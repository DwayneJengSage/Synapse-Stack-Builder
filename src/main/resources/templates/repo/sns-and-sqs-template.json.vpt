
#foreach( $queueDescriptor in $queueDescriptors)
	"${queueDescriptor.config.queueName}Queue": {
		"Type": "AWS::SQS::Queue",
		"Properties": {
			"QueueName": "${stack}-${instance}-${queueDescriptor.config.queueName}",
			#if ($queueDescriptor.config.deadLetterQueueMaxFailureCount)
			"RedrivePolicy": {
				"deadLetterTargetArn" : {"Fn::GetAtt" : [ "${queueDescriptor.config.queueName}DeadLetter" , "Arn" ]},
				"maxReceiveCount" : "${queueDescriptor.config.deadLetterQueueMaxFailureCount}"
			},
			#end
			"VisibilityTimeout":"${queueDescriptor.config.messageVisibilityTimeoutSec}"
		}
	}
	#if ($queueDescriptor.config.deadLetterQueueMaxFailureCount)
	,"${queueDescriptor.config.queueName}DeadLetter":{
		"Type" : "AWS::SQS::Queue",
		"Properties":{
		"QueueName": "${queueDescriptor.config.queueName}-dead-letter"
		}
	}
	#end

	#if($queueDescriptor.config.oldestMessageInQueueAlarmThresholdSec)
	,"${queueDescriptor.config.queueName}OldestMessageAlarm":{
		"Type" : "AWS::CloudWatch::Alarm",
		"Properties" : {
			"ActionsEnabled" : true,
			"AlarmActions" : [{"Ref":"${stack}NotificationTopic"}],
			"AlarmDescription" : "Alarm when oldest message in the ${queueDescriptor.config.queueName} queue exceeds ${queueDescriptor.config.oldestMessageInQueueAlarmThresholdSec} seconds",
			"AlarmName" : "${queueDescriptor.config.queueName}-queue-oldest-message-exceed-time",
			"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
			"Dimensions" : [{
				"Name" : "QueueName",
				"Value" : 	{"Fn::GetAtt":["${queueDescriptor.config.queueName}Queue", "QueueName"]}
			}],
			"EvaluationPeriods" : 1,
			"MetricName" : "ApproximateAgeOfOldestMessage",
			"Namespace" : "AWS/SQS",
			"Period" : 300,
			"Statistic" : "Maximum",
			"Threshold" : "${queueDescriptor.config.oldestMessageInQueueAlarmThresholdSec}",
			"Unit" : "Seconds"
		}
	}

	#end
	,"WriteTo${queueDescriptor.config.queueName}QueuePolicy":{
		"Type":"AWS::SQS::QueuePolicy",
		"Properties":{
			"PolicyDocument":{
				"Version":"2012-10-17",
				"Id":{
					"Fn::Join":[
						"/",
						[
							{
								"Fn::GetAtt":[
									"${queueDescriptor.config.queueName}Queue",
									"Arn"
								]
							},
							"SQSDefaultPolicy"
						]
					]
				},
				"Statement":[
					{
						"Sid":"allow-write-sns",
						"Effect":"Allow",
						"Principal":"*",
						"Action":[
							"sqs:SendMessage"
						],
						"Resource":"*",
						"Condition":{
							"ArnEquals":{
								"aws:SourceArn":[
									#foreach ( $subscribedTopic in $queueDescriptor.config.subscribedTopicNames)
									{
										"Ref":"${subscribedTopic}Topic"
									} #if( $foreach.hasNext) , #end
									#end
								]
							}
						}
					}
				]
			},
			"Queues":[
				{
					"Ref":"${queueDescriptor.config.queueName}Queue"
				}
			]
		}
	}
#end
,

#foreach( $snsTopicDescriptor in $snsTopicDescriptors)
	"${snsTopicDescriptor.topicName}Topic":{
		"Type" : "AWS::SNS::Topic",
		"Properties" : {
			"Subscription" : [
			#foreach($queueResourceName in $snsTopicDescriptor.subscribedQueueNames)
				{
					"Endpoint":{"Fn::GetAtt" : [ "${queueResourceName}Queue" , "Arn" ]},
					"Protocol": "sqs"
				}
				#if( $foreach.hasNext ) , #end
			#end
			],
			"TopicName" : "${stack}-${instance}-${snsTopicDescriptor.topicName}"
		}

	}
	#if( $foreach.hasNext) , #end
#end




