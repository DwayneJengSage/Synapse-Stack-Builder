#foreach( $subnetGroup in $subnetGroups )
	,
	"${subnetGroup.color}PublicNetworkAcl": {
		"Type": "AWS::EC2::NetworkAcl",
		"Properties": {
			"VpcId": {
				"Ref": "VPC"
			},
			"Tags": [
				{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				},
				{
					"Key": "Name",
					"Value": "${subnetGroup.color}Public"
				}
			]
		}
	},
	"${subnetGroup.color}InboundPublicNetworkAclEntry": {
		"Type": "AWS::EC2::NetworkAclEntry",
		"Properties": {
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}PublicNetworkAcl"
			},
			"RuleNumber": "100",
			"Protocol": "-1",
			"RuleAction": "allow",
			"Egress": "false",
			"CidrBlock": "0.0.0.0/0",
			"PortRange": {
				"From": "0",
				"To": "65535"
			}
		}
	},
	"${subnetGroup.color}OutboundPublicNetworkAclEntry": {
		"Type": "AWS::EC2::NetworkAclEntry",
		"Properties": {
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}PublicNetworkAcl"
			},
			"RuleNumber": "100",
			"Protocol": "-1",
			"RuleAction": "allow",
			"Egress": "true",
			"CidrBlock": "0.0.0.0/0",
			"PortRange": {
				"From": "0",
				"To": "65535"
			}
		}
	},
	"${subnetGroup.color}PrivateNetworkAcl": {
		"Type": "AWS::EC2::NetworkAcl",
		"Properties": {
			"VpcId": {
				"Ref": "VPC"
			},
			"Tags": [
				{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				},
				{
					"Key": "Name",
					"Value": "${subnetGroup.color}Private"
				}
			]
		}
	},
	"${subnetGroup.color}InboundPrivateSameGroupNetworkAclEntry": {
		"Type": "AWS::EC2::NetworkAclEntry",
		"Properties": {
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}PrivateNetworkAcl"
			},
			"RuleNumber": "100",
			"Protocol": "-1",
			"RuleAction": "allow",
			"Egress": "false",
			"CidrBlock": "${subnetGroup.cidr}",
			"PortRange": {
				"From": "0",
				"To": "65535"
			}
		}
	},
	"${subnetGroup.color}InboundPrivateVpnNetworkAclEntry": {
		"Type": "AWS::EC2::NetworkAclEntry",
		"Properties": {
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}PrivateNetworkAcl"
			},
			"RuleNumber": "99",
			"Protocol": "-1",
			"RuleAction": "allow",
			"Egress": "false",
			"CidrBlock": {
                  "Ref": "VpnCidr"
             },
			"PortRange": {
				"From": "0",
				"To": "65535"
			}
		}
	},
	"${subnetGroup.color}OutboundPrivateNetworkAclEntry": {
		"Type": "AWS::EC2::NetworkAclEntry",
		"Properties": {
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}PrivateNetworkAcl"
			},
			"RuleNumber": "100",
			"Protocol": "-1",
			"RuleAction": "allow",
			"Egress": "true",
			"CidrBlock": "0.0.0.0/0",
			"PortRange": {
				"From": "0",
				"To": "65535"
			}
		}
	}
	#foreach ( $subnet in $subnetGroup.subnets )
	,
	"${subnet.name}": {
		"Type": "AWS::EC2::Subnet",
		"Properties": {
			"MapPublicIpOnLaunch": true,
			"VpcId": {
				"Ref": "VPC"
			},
			"CidrBlock": "${subnet.cidr}",
			"AvailabilityZone": "${subnet.availabilityZone}",
			"Tags": [
				{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				},
				{
					"Key": "Name",
					"Value": "${subnet.name}"
				}
			]
		}
	},
	"${subnet.name}RouteTableAssociation": {
		"Type": "AWS::EC2::SubnetRouteTableAssociation",
		"Properties": {
			"SubnetId": {
				"Ref": "${subnet.name}"
			},
			"RouteTableId": {
				"Ref": "${subnet.type}RouteTable"
			}
		}
	},
	"${subnet.name}NetworkAclAssociation": {
		"Type": "AWS::EC2::SubnetNetworkAclAssociation",
		"Properties": {
			"SubnetId": {
				"Ref": "${subnet.name}"
			},
			"NetworkAclId": {
				"Ref": "${subnetGroup.color}${subnet.type}NetworkAcl"
			}
		}
	}
	#end
#end