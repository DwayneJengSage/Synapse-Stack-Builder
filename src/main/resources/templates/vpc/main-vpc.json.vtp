{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates a VPC with public and private subnets for the Synapse stacks.",
	"Parameters": {
		"VpcName": {
			"Description": "The VPC name (i.e. Synapse-Prod)",
			"Type": "String"
		},
		"VpcSubnetPrefix": {
			"Description": "The VPC subnet prefix (i.e. 10.40)",
			"Type": "String"
		},
		"PublicSubnetZones": {
			"Description": "Availability zones for public subnets",
			"Type": "List<AWS::EC2::AvailabilityZone::Name>",
			"ConstraintDescription": "List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c",
			"Default": "us-east-1a, us-east-1b"
		},
		"PrivateSubnetZones": {
			"Description": "Availability zones for private subnets",
			"Type": "List<AWS::EC2::AvailabilityZone::Name>",
			"ConstraintDescription": "List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c",
			"Default": "us-east-1a, us-east-1b"
		},
		"VpnCidr": {
			"Description": "CIDR of the (sophos-utm) VPN",
			"Type": "String",
			"Default": "10.1.0.0/16"
		}
	},
	"Mappings": {
		"SubnetConfig": {
			"VPC": {
				"CIDR": "0.0/16"
			},
			"RedPublic1": {
				"CIDR": "0.0/22"
			},
			"RedPrivate1": {
				"CIDR": "4.0/22"
			},
			"RedPublic2": {
				"CIDR": "8.0/22"
			},
			"RedPrivate2": {
				"CIDR": "12.0/22"
			},
			"GreenPublic1": {
				"CIDR": "16.0/22"
			},
			"GreenPrivate1": {
				"CIDR": "20.0/22"
			},
			"GreenPublic2": {
				"CIDR": "24.0/22"
			},
			"GreenPrivate2": {
				"CIDR": "28.0/22"
			},
			"BluePublic1": {
				"CIDR": "32.0/22"
			},
			"BluePrivate1": {
				"CIDR": "36.0/22"
			},
			"BluePublic2": {
				"CIDR": "40.0/22"
			},
			"BluePrivate2": {
				"CIDR": "44.0/22"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"CidrBlock": {
					"Fn::Join": [
						".",
						[
							{
								"Ref": "VpcSubnetPrefix"
							},
							{
								"Fn::FindInMap": [
									"SubnetConfig",
									"VPC",
									"CIDR"
								]
							}
						]
					]
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "RedPublic1, RedPublic2, RedPrivate1, RedPrivate2, GreenPublic1, GreenPublic2, GreenPrivate1, GreenPrivate2, BluePublic1, BluePublic2, BluePrivate1, BluePrivate2"
					},
					{
						"Key": "Name",
						"Value": {
							"Ref": "VpcName"
						}
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "REDPublic1, REDPublic2"
					},
					{
						"Key": "Name",
						"Value": "REDPublic1, REDPublic2"
					}
				]
			}
		},
		"GatewayToInternet": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					},
					{
						"Key": "Name",
						"Value": "Public"
					}
				]
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Public"
					},
					{
						"Key": "Name",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "GatewayToInternet",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"ElasticIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Network",
						"Value": "Private"
					},
					{
						"Key": "Name",
						"Value": "Private"
					}
				]
			}
		}, 
		"VpnSecurityGroup": {
            "DependsOn": "VPC",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for VPN",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [{
                    "CidrIp": {
                        "Ref": "VpnCidr"
                    },
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "IpProtocol": "-1",
                    "Description": "Allow all VPN traffic"
                }],
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "IpProtocol": "-1"
                }]
            }
        }
		#parse( "templates/vpc/subnet-resources.json.vtp" )
	},
	"Outputs": {
		"VPCId": {
			"Description": "VPCId of the newly created VPC",
			"Value": {
				"Ref": "VPC"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"VPCId"
						]
					]
				}
			}
		},
		"VpcCidr": {
			"Description": "VPC CIDR of the newly created VPC",
			"Value": {
				"Fn::GetAtt": [
					"VPC",
					"CidrBlock"
				]
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"VpcCidr"
						]
					]
				}
			}
		},
		"PublicRouteTable": {
			"Description": "Route table Id for public subnets",
			"Value": {
				"Ref": "PublicRouteTable"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"PublicRouteTable"
						]
					]
				}
			}
		},
		"VpcDefaultSecurityGroup": {
			"Description": "VPC DefaultSecurityGroup Id ",
			"Value": {
				"Fn::GetAtt": [
					"VPC",
					"DefaultSecurityGroup"
				]
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"VpcDefaultSecurityGroup"
						]
					]
				}
			}
		},
		"VpnSecurityGroup": {
			"Description": "VPN Security Group Id ",
			"Value": {
				"Ref": "VpnSecurityGroup"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"VpnSecurityGroup"
						]
					]
				}
			}
		},
		"PrivateRouteTable": {
			"Description": "Route table Id for private subnets",
			"Value": {
				"Ref": "PrivateRouteTable"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"PrivateRouteTable"
						]
					]
				}
			}
		}
		#parse( "templates/vpc/subnet-output.json.vtp" ) 
	}
}
