package org.sagebionetworks.stack;

import java.net.URL;

import com.amazonaws.services.cloudsearchv2.model.DomainStatus;
import com.amazonaws.services.cloudwatch.model.DescribeAlarmsResult;
import com.amazonaws.services.ec2.model.KeyPairInfo;
import com.amazonaws.services.ec2.model.SecurityGroup;
import com.amazonaws.services.elasticbeanstalk.model.ApplicationDescription;
import com.amazonaws.services.elasticbeanstalk.model.ApplicationVersionDescription;
import com.amazonaws.services.elasticbeanstalk.model.DescribeConfigurationOptionsResult;
import com.amazonaws.services.elasticbeanstalk.model.EnvironmentDescription;
import com.amazonaws.services.identitymanagement.model.ServerCertificateMetadata;
import com.amazonaws.services.rds.model.DBInstance;
import com.amazonaws.services.rds.model.DBParameterGroup;
import com.amazonaws.services.rds.model.DBSecurityGroup;
import com.amazonaws.services.s3.model.Bucket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * All of the resources generated by this build.
 * 
 * @author John
 *
 */
public class GeneratedResources {

	private String stackInstanceNotificationTopicArn;
	private Map<StackEnvironmentType, String> environmentInstanceNotificationTopicArns;
	private SecurityGroup elasticBeanstalkEC2SecurityGroup;
	private DBSecurityGroup idGeneratorDatabaseSecurityGroup;
	private DBSecurityGroup stackInstancesDatabaseSecurityGroup;
	private DBInstance idGeneratorDatabase;
	private DBInstance stackInstancesDatabase;
	private List<DBInstance> stackInstanceTablesDatabases;
	private DescribeAlarmsResult idGeneratorDatabaseAlarms;
	private DescribeAlarmsResult stackInstancesDatabaseAlarms;
	private Map<StackEnvironmentType, DescribeAlarmsResult> environmentELBsAlarms;
	private List<DescribeAlarmsResult> stackInstanceTablesDatabaseAlarms;
	private URL stackConfigurationFileURL;
	private ApplicationDescription elasticBeanstalkApplication;
	private ApplicationVersionDescription portalApplicationVersion;
	private ApplicationVersionDescription repoApplicationVersion;
	private ApplicationVersionDescription workersApplicationVersion;
	private ServerCertificateMetadata sslCertificate;
	private Map<StackEnvironmentType, ServerCertificateMetadata> sslCertificates;
	private Map<StackEnvironmentType, String> acmCertificateArns;
	private KeyPairInfo stackKeyPair;
	private Map<String, DescribeConfigurationOptionsResult> elasticBeanstalkConfigurationTemplate;
	private Map<StackEnvironmentType, EnvironmentDescription> environmentDescriptions;
	private DomainStatus searchDomain;
	private DBParameterGroup dbParameterGroup;
	private Bucket mainFileBucket;

	public GeneratedResources() {
		this.sslCertificates = new HashMap<StackEnvironmentType, ServerCertificateMetadata>();
		this.acmCertificateArns = new HashMap<StackEnvironmentType, String>();
		this.elasticBeanstalkConfigurationTemplate = new HashMap<String, DescribeConfigurationOptionsResult>();
		this.stackInstanceTablesDatabases = new ArrayList<DBInstance>();
		this.environmentInstanceNotificationTopicArns = new HashMap<StackEnvironmentType, String>();
		this.environmentELBsAlarms = new HashMap<StackEnvironmentType, DescribeAlarmsResult>();
		this.environmentDescriptions = new HashMap<StackEnvironmentType, EnvironmentDescription>();
	}
	/**
	 * The search domain.
	 * @return
	 */
	public DomainStatus getSearchDomain() {
		return searchDomain;
	}

	/**
	 * The search domain.
	 * @param searchDomain
	 */
	public void setSearchDomain(DomainStatus searchDomain) {
		this.searchDomain = searchDomain;
	}

	public EnvironmentDescription getEnvironment(StackEnvironmentType env) {
		return this.environmentDescriptions.get(env);
	}
	
	public void setEnvironment(StackEnvironmentType env, EnvironmentDescription envDesc) {
		this.environmentDescriptions.put(env, envDesc);
	}
	
	/**
	 * Elastic Beanstalk Configuration Template used to create environments.
	 * 
	 * @return
	 */
	public DescribeConfigurationOptionsResult getElasticBeanstalkConfigurationTemplate(final String svcPrefix) {
		return elasticBeanstalkConfigurationTemplate.get(svcPrefix);
	}

	/**
	 * Elastic Beanstalk Configuration Template used to create environments.
	 * 
	 * @param elasticBeanstalkConfigurationTemplate
	 */
	public void setElasticBeanstalkConfigurationTemplate(
			String svcPrefix,
			DescribeConfigurationOptionsResult elasticBeanstalkConfigurationTemplate) {
		this.elasticBeanstalkConfigurationTemplate.put(svcPrefix, elasticBeanstalkConfigurationTemplate);
	}

	/**
	 * The Key Pair used by the stack.
	 * @return
	 */
	public KeyPairInfo getStackKeyPair() {
		return stackKeyPair;
	}

	/**
	 * The Key Pair used by the stack.
	 * @param stackKeyPair
	 */
	public void setStackKeyPair(KeyPairInfo stackKeyPair) {
		this.stackKeyPair = stackKeyPair;
	}

	/**
	 * The SSL certificate.
	 * @return
	 */
	public ServerCertificateMetadata getSslCertificate(StackEnvironmentType env) {
		return sslCertificates.get(env);
	}

	/**
	 * The SSL certificate
	 * @param sslCertificate
	 */
	public void setSslCertificate(StackEnvironmentType env, ServerCertificateMetadata sslCertificate) {
		this.sslCertificates.put(env, sslCertificate);
	}
	
	/**
	 * The ARN for the ACM certificate for a given environment type
	 * @param env
	 * @return 
	 */
	public String getACMCertificateArn(StackEnvironmentType env) {
		return this.acmCertificateArns.get(env);
	}
	
	/**
	 * Set the ARN for the ACM certificate for a given environment type
	 * @param env
	 * @param arn 
	 */
	public void setACMCertificateArn(StackEnvironmentType env, String arn) {
		this.acmCertificateArns.put(env, arn);
	}

	/**
	 * The elastic beanstalk application.
	 * @return
	 */
	public ApplicationDescription getElasticBeanstalkApplication() {
		return elasticBeanstalkApplication;
	}

	/**
	 * The elastic beanstalk application.
	 * @param elasticBeanstalkApplication
	 */
	public void setElasticBeanstalkApplication(
			ApplicationDescription elasticBeanstalkApplication) {
		this.elasticBeanstalkApplication = elasticBeanstalkApplication;
	}

	/**
	 * The application version of the portal.
	 * @return
	 */
	public ApplicationVersionDescription getPortalApplicationVersion() {
		return portalApplicationVersion;
	}

	/**
	 * The application version of the portal.
	 * @param portalApplicationVersion
	 */
	public void setPortalApplicationVersion(
			ApplicationVersionDescription portalApplicationVersion) {
		this.portalApplicationVersion = portalApplicationVersion;
	}
	
	/**
	 * The application version of the repository
	 * @return
	 */
	public ApplicationVersionDescription getRepoApplicationVersion() {
		return repoApplicationVersion;
	}

	/**
	 * 
	 * @param reopApplicationVersion
	 */
	public void setRepoApplicationVersion(
			ApplicationVersionDescription reopApplicationVersion) {
		this.repoApplicationVersion = reopApplicationVersion;
	}
	
	/**
	 * The application version of the workers service
	 * @return
	 */
	public ApplicationVersionDescription getWorkersApplicationVersion() {
		return workersApplicationVersion;
	}

	/**
	 * The application version of the workers service
	 * @param workersApplicationVersion
	 */
	public void setWorkersApplicationVersion(
			ApplicationVersionDescription workersApplicationVersion) {
		this.workersApplicationVersion = workersApplicationVersion;
	}

	/**
	 * The elastic beanstalk security group for this stack instance.
	 * @param group
	 */
	public void setElasticBeanstalkEC2SecurityGroup(SecurityGroup group) {
		this.elasticBeanstalkEC2SecurityGroup = group;
	}

	/**
	 * The elastic beanstalk security group for this stack instance.
	 * @return
	 */
	public SecurityGroup getElasticBeanstalkEC2SecurityGroup() {
		return elasticBeanstalkEC2SecurityGroup;
	}

	/**
	 * The topic used to notify when RDS alarms are triggered.
	 * @return
	 */
	public String getStackInstanceNotificationTopicArn() {
		return stackInstanceNotificationTopicArn;
	}

	/**
	 * The topic used to notify for stack instance events (alerts).
	 * @param topicArn
	 */
	public void setStackInstanceNotificationTopicArn(String topicArn) {
		this.stackInstanceNotificationTopicArn = topicArn;
	}
	
	/**
	 * The topic used to notify for environment events (one of portal, repo or worker)
	 * @return 
	 */
	public String getEnvironmentInstanceNotificationTopicArn(StackEnvironmentType env) {
		return this.environmentInstanceNotificationTopicArns.get(env);
	}
	
	/**
	 * The topic used to notify for environment events (one of portal, repo or worker)
	 * @return 
	 */
	public void setEnvironmentInstanceNotificationTopicArn(StackEnvironmentType env, String topicArn) {
		this.environmentInstanceNotificationTopicArns.put(env, topicArn);
	}

	/**
	 * The DB security group used by the Id Generator.
	 * @return
	 */
	public DBSecurityGroup getIdGeneratorDatabaseSecurityGroup() {
		return idGeneratorDatabaseSecurityGroup;
	}

	/**
	 * The DB security group used by the Id Generator.
	 * @param idGeneratorDatabaseSecurityGroup
	 */
	public void setIdGeneratorDatabaseSecurityGroup(
			DBSecurityGroup idGeneratorDatabaseSecurityGroup) {
		this.idGeneratorDatabaseSecurityGroup = idGeneratorDatabaseSecurityGroup;
	}

	/**
	 * The DB security group for the stack instances.
	 * @return
	 */
	public DBSecurityGroup getStackInstancesDatabaseSecurityGroup() {
		return stackInstancesDatabaseSecurityGroup;
	}

	/**
	 * The DB security group for the stack instances.
	 * @param stackInstancesDatabaseSecurityGroup
	 */
	public void setStackInstancesDatabaseSecurityGroup(
			DBSecurityGroup stackInstancesDatabaseSecurityGroup) {
		this.stackInstancesDatabaseSecurityGroup = stackInstancesDatabaseSecurityGroup;
	}

	/**
	 * The database instances used by the ID generator
	 * @return
	 */
	public DBInstance getIdGeneratorDatabase() {
		return idGeneratorDatabase;
	}

	/**
	 * The database instances used by the ID generator
	 * @param idGeneratorDatabase
	 */
	public void setIdGeneratorDatabase(DBInstance idGeneratorDatabase) {
		this.idGeneratorDatabase = idGeneratorDatabase;
	}

	/**
	 * The database instances used by the stack instance.
	 * @return
	 */
	public DBInstance getStackInstancesDatabase() {
		return stackInstancesDatabase;
	}

	/**
	 * The database instances used by the stack instance.
	 * @param stackInstancesDatabase
	 */
	public void setStackInstancesDatabase(DBInstance stackInstancesDatabase) {
		this.stackInstancesDatabase = stackInstancesDatabase;
	}
	
	public List<DBInstance> getStackInstanceTablesDatabases() {
		return this.stackInstanceTablesDatabases;
	}
	
	public void setStackInstanceTablesDatabases(List<DBInstance> stiDbs) {
		this.stackInstanceTablesDatabases.addAll(stiDbs);
	}

	/**
	 * The list of alarms applied to the ID Generator database.
	 * @return
	 */
	public DescribeAlarmsResult getIdGeneratorDatabaseAlarms() {
		return idGeneratorDatabaseAlarms;
	}

	/**
	 * The list of alarms applied to the ID Generator database.
	 * @param idGeneratorDatabaseAlarms
	 */
	public void setIdGeneratorDatabaseAlarms(DescribeAlarmsResult idGeneratorDatabaseAlarms) {
		this.idGeneratorDatabaseAlarms = idGeneratorDatabaseAlarms;
	}

	/**
	 * The list of Alarms applied to the stack instances database.
	 * @return
	 */
	public DescribeAlarmsResult getStackInstancesDatabaseAlarms() {
		return stackInstancesDatabaseAlarms;
	}
	
	/**
	 * The list of Alarms applied to the stack instances database.
	 * @param stackInstancesDatabaseAlarms
	 */
	public void setStackInstancesDatabaseAlarms(
			DescribeAlarmsResult stackInstancesDatabaseAlarms) {
		this.stackInstancesDatabaseAlarms = stackInstancesDatabaseAlarms;
	}

	/**
	 * 
	 */
	public void setStackInstanceTablesDatabaseAlarms(List<DescribeAlarmsResult> stackInstanceTablesDatabasesAlarms) {
		this.stackInstanceTablesDatabaseAlarms = stackInstanceTablesDatabasesAlarms;
	}
	
	/**
	 * 
	 */
	public List<DescribeAlarmsResult> getStackInstanceTablesDatabaseAlarms() {
		return this.stackInstanceTablesDatabaseAlarms;
	}

	/**
	 * The URL of the final stack configuration file generated by this build.
	 * @return
	 */
	public URL getStackConfigurationFileURL() {
		return stackConfigurationFileURL;
	}

	public DescribeAlarmsResult getEnvironmentELBAlarms(StackEnvironmentType env) {
		return this.environmentELBsAlarms.get(env);
	}
	
	public void setEnvironmentELBAlarms(StackEnvironmentType env, DescribeAlarmsResult alarm) {
		this.environmentELBsAlarms.put(env, alarm);
	}

	/**
	 * The URL of the final stack configuration file generated by this build.
	 * @param stackConfigurationFileURL
	 */
	public void setStackConfigurationFileURL(URL stackConfigurationFileURL) {
		this.stackConfigurationFileURL = stackConfigurationFileURL;
	}

	/**
	 * @return the dbParameterGroup
	 */
	public DBParameterGroup getDbParameterGroup() {
		return dbParameterGroup;
	}

	/**
	 * @param dbParameterGroup the dbParameterGroup to set
	 */
	public void setDbParameterGroup(DBParameterGroup dbParameterGroup) {
		this.dbParameterGroup = dbParameterGroup;
	}

	/**
	 * @return The S3 bucket to store files uploaded to the app.
	 */
	public Bucket getMainFileS3Bucket() {
		return mainFileBucket;
	}

	/**
	 * 
	 * @param mainFileBucket Set the S3 bucket to store files uploaded to the app.
	 */
	public void setMainFileS3Bucket(Bucket mainFileS3Bucket) {
		this.mainFileBucket = mainFileS3Bucket;
	}
	
}
